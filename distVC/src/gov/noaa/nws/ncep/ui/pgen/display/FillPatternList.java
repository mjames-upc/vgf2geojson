/*     */ package gov.noaa.nws.ncep.ui.pgen.display;
/*     */ 
/*     */ import java.util.EnumMap;
/*     */ 
/*     */ public class FillPatternList
/*     */ {
/*  49 */   private static FillPatternList instance = null;
/*     */   private EnumMap<FillPattern, byte[]> patternMap;
/*     */ 
/*     */   protected FillPatternList()
/*     */   {
/*  61 */     this.patternMap = new EnumMap(FillPattern.class);
/*  62 */     initialize();
/*     */   }
/*     */ 
/*     */   public static synchronized FillPatternList getInstance()
/*     */   {
/*  72 */     if (instance == null) {
/*  73 */       instance = new FillPatternList();
/*     */     }
/*  75 */     return instance;
/*     */   }
/*     */ 
/*     */   private void initialize()
/*     */   {
/*  84 */     loadInternal();
/*     */   }
/*     */ 
/*     */   public byte[] getFillPattern(FillPattern key)
/*     */   {
/*  95 */     if ((key.equals(FillPattern.SOLID)) || (key.equals(FillPattern.TRANSPARENCY))) {
/*  96 */       return null;
/*     */     }
/*  98 */     return (byte[])this.patternMap.get(key);
/*     */   }
/*     */ 
/*     */   private void loadInternal()
/*     */   {
/* 125 */     int[] pattern0 = { 170, 170, 170, 170, 
/* 126 */       85, 85, 85, 85, 
/* 127 */       170, 170, 170, 170, 
/* 128 */       85, 85, 85, 85, 
/* 129 */       170, 170, 170, 170, 
/* 130 */       85, 85, 85, 85, 
/* 131 */       170, 170, 170, 170, 
/* 132 */       85, 85, 85, 85, 
/* 133 */       170, 170, 170, 170, 
/* 134 */       85, 85, 85, 85, 
/* 135 */       170, 170, 170, 170, 
/* 136 */       85, 85, 85, 85, 
/* 137 */       170, 170, 170, 170, 
/* 138 */       85, 85, 85, 85, 
/* 139 */       170, 170, 170, 170, 
/* 140 */       85, 85, 85, 85, 
/* 141 */       170, 170, 170, 170, 
/* 142 */       85, 85, 85, 85, 
/* 143 */       170, 170, 170, 170, 
/* 144 */       85, 85, 85, 85, 
/* 145 */       170, 170, 170, 170, 
/* 146 */       85, 85, 85, 85, 
/* 147 */       170, 170, 170, 170, 
/* 148 */       85, 85, 85, 85, 
/* 149 */       170, 170, 170, 170, 
/* 150 */       85, 85, 85, 85, 
/* 151 */       170, 170, 170, 170, 
/* 152 */       85, 85, 85, 85, 
/* 153 */       170, 170, 170, 170, 
/* 154 */       85, 85, 85, 85, 
/* 155 */       170, 170, 170, 170, 
/* 156 */       85, 85, 85, 85 };
/*     */ 
/* 159 */     byte[] pattern_0 = new byte[pattern0.length];
/* 160 */     for (int i = 0; i < pattern0.length; i++) {
/* 161 */       pattern_0[i] = ((byte)pattern0[i]);
/*     */     }
/* 163 */     this.patternMap.put(FillPattern.FILL_PATTERN_0, pattern_0);
/*     */ 
/* 235 */     int[] pattern1 = { 
/* 236 */       128, 128, 128, 128, 
/* 237 */       64, 64, 64, 64, 
/* 238 */       32, 32, 32, 32, 
/* 239 */       16, 16, 16, 16, 
/* 246 */       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 
/* 247 */       64, 64, 64, 64, 
/* 248 */       32, 32, 32, 32, 
/* 249 */       16, 16, 16, 16, 
/* 256 */       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 
/* 257 */       64, 64, 64, 64, 
/* 258 */       32, 32, 32, 32, 
/* 259 */       16, 16, 16, 16, 
/* 266 */       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 
/* 267 */       64, 64, 64, 64, 
/* 268 */       32, 32, 32, 32, 
/* 269 */       16, 16, 16, 16 };
/*     */ 
/* 277 */     byte[] pattern_1 = new byte[pattern1.length];
/* 278 */     for (int i = 0; i < pattern1.length; i++) {
/* 279 */       pattern_1[i] = ((byte)pattern1[i]);
/*     */     }
/* 281 */     this.patternMap.put(FillPattern.FILL_PATTERN_1, pattern_1);
/*     */ 
/* 283 */     int[] pattern2 = { 128, 0, 128, 
/* 284 */       0, 64, 0, 64, 
/* 285 */       0, 32, 0, 32, 
/* 286 */       0, 16, 0, 16, 
/* 287 */       0, 8, 0, 8, 
/* 288 */       0, 4, 0, 4, 
/* 289 */       0, 2, 0, 2, 
/* 290 */       0, 1, 0, 1, 
/* 291 */       0, 0, 128, 0, 128, 
/* 292 */       0, 64, 0, 64, 
/* 293 */       0, 32, 0, 32, 
/* 294 */       0, 16, 0, 16, 
/* 295 */       0, 8, 0, 8, 
/* 296 */       0, 4, 0, 4, 
/* 297 */       0, 2, 0, 2, 
/* 298 */       0, 1, 0, 1, 
/* 299 */       128, 0, 128, 
/* 300 */       0, 64, 0, 64, 
/* 301 */       0, 32, 0, 32, 
/* 302 */       0, 16, 0, 16, 
/* 303 */       0, 8, 0, 8, 
/* 304 */       0, 4, 0, 4, 
/* 305 */       0, 2, 0, 2, 
/* 306 */       0, 1, 0, 1, 
/* 307 */       0, 0, 128, 0, 128, 
/* 308 */       0, 64, 0, 64, 
/* 309 */       0, 32, 0, 32, 
/* 310 */       0, 16, 0, 16, 
/* 311 */       0, 8, 0, 8, 
/* 312 */       0, 4, 0, 4, 
/* 313 */       0, 2, 0, 2, 
/* 314 */       0, 1, 0, 1 };
/*     */ 
/* 317 */     byte[] pattern_2 = new byte[pattern2.length];
/* 318 */     for (int i = 0; i < pattern2.length; i++) {
/* 319 */       pattern_2[i] = ((byte)pattern2[i]);
/*     */     }
/* 321 */     this.patternMap.put(FillPattern.FILL_PATTERN_2, pattern_2);
/*     */ 
/* 323 */     int[] pattern3 = { 8, 8, 8, 8, 
/* 324 */       4, 4, 4, 4, 
/* 325 */       2, 2, 2, 2, 
/* 326 */       1, 1, 1, 1, 
/* 327 */       128, 128, 128, 128, 
/* 328 */       64, 64, 64, 64, 
/* 329 */       32, 32, 32, 32, 
/* 330 */       16, 16, 16, 16, 
/* 331 */       8, 8, 8, 8, 
/* 332 */       4, 4, 4, 4, 
/* 333 */       2, 2, 2, 2, 
/* 334 */       1, 1, 1, 1, 
/* 335 */       128, 128, 128, 128, 
/* 336 */       64, 64, 64, 64, 
/* 337 */       32, 32, 32, 32, 
/* 338 */       16, 16, 16, 16, 
/* 339 */       8, 8, 8, 8, 
/* 340 */       4, 4, 4, 4, 
/* 341 */       2, 2, 2, 2, 
/* 342 */       1, 1, 1, 1, 
/* 343 */       128, 128, 128, 128, 
/* 344 */       64, 64, 64, 64, 
/* 345 */       32, 32, 32, 32, 
/* 346 */       16, 16, 16, 16, 
/* 347 */       8, 8, 8, 8, 
/* 348 */       4, 4, 4, 4, 
/* 349 */       2, 2, 2, 2, 
/* 350 */       1, 1, 1, 1, 
/* 351 */       128, 128, 128, 128, 
/* 352 */       64, 64, 64, 64, 
/* 353 */       32, 32, 32, 32, 
/* 354 */       16, 16, 16, 16 };
/*     */ 
/* 357 */     byte[] pattern_3 = new byte[pattern3.length];
/* 358 */     for (int i = 0; i < pattern3.length; i++) {
/* 359 */       pattern_3[i] = ((byte)pattern3[i]);
/*     */     }
/* 361 */     this.patternMap.put(FillPattern.FILL_PATTERN_3, pattern_3);
/*     */ 
/* 376 */     int[] pattern4 = { 
/* 377 */       128, 0, 128, 
/* 378 */       0, 128, 0, 128, 
/* 379 */       0, 128, 0, 128, 
/* 380 */       0, 128, 0, 128, 
/* 381 */       0, 128, 0, 128, 
/* 382 */       0, 128, 0, 128, 
/* 383 */       0, 128, 0, 128, 
/* 384 */       0, 255, 128, 255, 128, 
/* 385 */       0, 128, 0, 128, 
/* 386 */       0, 128, 0, 128, 
/* 387 */       0, 128, 0, 128, 
/* 388 */       0, 128, 0, 128, 
/* 389 */       0, 128, 0, 128, 
/* 390 */       0, 128, 0, 128, 
/* 391 */       0, 128, 0, 128, 
/* 392 */       128, 255, 128, 255, 
/* 393 */       128, 0, 128, 
/* 394 */       0, 128, 0, 128, 
/* 395 */       0, 128, 0, 128, 
/* 396 */       0, 128, 0, 128, 
/* 397 */       0, 128, 0, 128, 
/* 398 */       0, 128, 0, 128, 
/* 399 */       0, 128, 0, 128, 
/* 400 */       0, 255, 128, 255, 128, 
/* 401 */       0, 128, 0, 128, 
/* 402 */       0, 128, 0, 128, 
/* 403 */       0, 128, 0, 128, 
/* 404 */       0, 128, 0, 128, 
/* 405 */       0, 128, 0, 128, 
/* 406 */       0, 128, 0, 128, 
/* 407 */       0, 128, 0, 128, 
/* 408 */       128, 255, 128, 255 };
/*     */ 
/* 411 */     byte[] pattern_4 = new byte[pattern4.length];
/* 412 */     for (int i = 0; i < pattern4.length; i++) {
/* 413 */       pattern_4[i] = ((byte)pattern4[i]);
/*     */     }
/* 415 */     this.patternMap.put(FillPattern.FILL_PATTERN_4, pattern_4);
/*     */ 
/* 451 */     int[] pattern5 = { 
/* 453 */       0, 0, 0, 0, 0, 0, 0, 0, 51, 51, 51, 51, 
/* 454 */       51, 51, 51, 51, 
/* 457 */       0, 0, 0, 0, 0, 0, 0, 0, 204, 204, 204, 204, 
/* 458 */       204, 204, 204, 204, 
/* 461 */       0, 0, 0, 0, 0, 0, 0, 0, 51, 51, 51, 51, 
/* 462 */       51, 51, 51, 51, 
/* 465 */       0, 0, 0, 0, 0, 0, 0, 0, 204, 204, 204, 204, 
/* 466 */       204, 204, 204, 204, 
/* 469 */       0, 0, 0, 0, 0, 0, 0, 0, 51, 51, 51, 51, 
/* 470 */       51, 51, 51, 51, 
/* 473 */       0, 0, 0, 0, 0, 0, 0, 0, 204, 204, 204, 204, 
/* 474 */       204, 204, 204, 204, 
/* 477 */       0, 0, 0, 0, 0, 0, 0, 0, 51, 51, 51, 51, 
/* 478 */       51, 51, 51, 51, 
/* 481 */       0, 0, 0, 0, 0, 0, 0, 0, 204, 204, 204, 204, 
/* 482 */       204, 204, 204, 204 };
/*     */ 
/* 485 */     byte[] pattern_5 = new byte[pattern5.length];
/* 486 */     for (int i = 0; i < pattern5.length; i++) {
/* 487 */       pattern_5[i] = ((byte)pattern5[i]);
/*     */     }
/* 489 */     this.patternMap.put(FillPattern.FILL_PATTERN_5, pattern_5);
/*     */ 
/* 491 */     int[] pattern6 = { 136, 136, 136, 136, 
/* 492 */       68, 68, 68, 68, 
/* 493 */       34, 34, 34, 34, 
/* 494 */       17, 17, 17, 17, 
/* 495 */       136, 136, 136, 136, 
/* 496 */       68, 68, 68, 68, 
/* 497 */       34, 34, 34, 34, 
/* 498 */       17, 17, 17, 17, 
/* 499 */       136, 136, 136, 136, 
/* 500 */       68, 68, 68, 68, 
/* 501 */       34, 34, 34, 34, 
/* 502 */       17, 17, 17, 17, 
/* 503 */       136, 136, 136, 136, 
/* 504 */       68, 68, 68, 68, 
/* 505 */       34, 34, 34, 34, 
/* 506 */       17, 17, 17, 17, 
/* 507 */       136, 136, 136, 136, 
/* 508 */       68, 68, 68, 68, 
/* 509 */       34, 34, 34, 34, 
/* 510 */       17, 17, 17, 17, 
/* 511 */       136, 136, 136, 136, 
/* 512 */       68, 68, 68, 68, 
/* 513 */       34, 34, 34, 34, 
/* 514 */       17, 17, 17, 17, 
/* 515 */       136, 136, 136, 136, 
/* 516 */       68, 68, 68, 68, 
/* 517 */       34, 34, 34, 34, 
/* 518 */       17, 17, 17, 17, 
/* 519 */       136, 136, 136, 136, 
/* 520 */       68, 68, 68, 68, 
/* 521 */       34, 34, 34, 34, 
/* 522 */       17, 17, 17, 17 };
/*     */ 
/* 525 */     byte[] pattern_6 = new byte[pattern6.length];
/* 526 */     for (int i = 0; i < pattern6.length; i++) {
/* 527 */       pattern_6[i] = ((byte)pattern6[i]);
/*     */     }
/* 529 */     this.patternMap.put(FillPattern.FILL_PATTERN_6, pattern_6);
/*     */   }
/*     */ 
/*     */   public static enum FillPattern
/*     */   {
/*  42 */     FILL_PATTERN_0, FILL_PATTERN_1, 
/*  43 */     FILL_PATTERN_2, FILL_PATTERN_3, FILL_PATTERN_4, FILL_PATTERN_5, 
/*  44 */     FILL_PATTERN_6, SOLID, TRANSPARENCY;
/*     */   }
/*     */ }

/* Location:           /Users/mj/vgf2geojson/distVC/vgfConverter.jar
 * Qualified Name:     gov.noaa.nws.ncep.ui.pgen.display.FillPatternList
 * JD-Core Version:    0.6.2
 */